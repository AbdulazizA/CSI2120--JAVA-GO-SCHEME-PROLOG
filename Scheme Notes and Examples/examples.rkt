#lang scheme
; Always use the abvove lang declarations. 
(printf "-------(+ 3 4)--------\n")
(+ 3 4)
;7
(printf "-------Condtional Evaluvation--------\n")
( define (showIt pts)
    (cond ((or (<= pts 3) (>= pts 65) ) 0) 
            ((<= 4 pts 6) 0.5)  
            ((<= 10 pts 12) 1)
            (else 2.0))
)
(showIt 25)
(printf "-------LET--------\n")
(let ((a 3) (b 4))(* a b))
(printf "-------Cons-------\n")
(let ((a '(1 2 3)) (b '(4 5 6))) (cons a  b) )
(printf "-------Lambda-------\n")
((lambda (f x y)  (f x x) (f y y)  (f x y) (f y y)) + 2 3)
(printf "-------Factorial-------\n")
(define (fact n)
  ( if (> n 0)
    (* n (fact (- n 1))) 1
  )
)
(fact 35)
(printf "-------Fahrenheit to Celsius------\n")
(define (f-2-c temp)
  (/ (- temp 32) 1.8)
)
(f-2-c 32)
(printf "-------Lambda and Let------\n")
(let ((x 'a))
  (let ((f (lambda (y) (list x y))))
  (f 'b)  
  )
)
(printf "-------GCD------\n")
( define gcd 
    (lambda (a b) 
        (if (= a b) a
            (if (> a b) 
                (gcd (- a b) b) 
                (gcd a (- b a))
            )
        )
    )
)
(gcd 12 15)